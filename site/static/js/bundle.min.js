class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = document.getElementById('market-widgets')
  t &&
    ((t.innerHTML = ''),
    [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ].forEach((i) => {
      const n = createMarketSection(i, e)
      t.appendChild(n)
    }))
  const i = document.getElementById('medtech-widget')
  i &&
    createSymbolOverviewWidget(
      i,
      [
        ['NYSE:MDT', 'Medtronic'],
        ['NYSE:JNJ', 'Johnson & Johnson'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:SYK', 'Stryker'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['NYSE:ABT', 'Abbott'],
        ['NYSE:BSX', 'Boston Scientific'],
        ['NYSE:BDX', 'Becton Dickinson'],
        ['NYSE:BAX', 'Baxter']
      ],
      e
    )
  const n = document.getElementById('nuclear-widget')
  n &&
    createSymbolOverviewWidget(
      n,
      [
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:CMLS', 'Curium Medical']
      ],
      e
    )
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  return (
    (i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `),
    createSymbolOverviewWidget(
      i.querySelector(`.widget-container-${e.id.toLowerCase()}`),
      e.symbols,
      t
    ),
    i
  )
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = document.getElementById('market-widgets')
  t &&
    ((t.innerHTML = ''),
    [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ].forEach((i) => {
      const n = createMarketSection(i, e)
      t.appendChild(n)
    }))
  const i = document.getElementById('medtech-widget')
  i &&
    createSymbolOverviewWidget(
      i,
      [
        ['NYSE:MDT', 'Medtronic'],
        ['NYSE:JNJ', 'Johnson & Johnson'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:SYK', 'Stryker'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['NYSE:ABT', 'Abbott'],
        ['NYSE:BSX', 'Boston Scientific'],
        ['NYSE:BDX', 'Becton Dickinson'],
        ['NYSE:BAX', 'Baxter']
      ],
      e
    )
  const n = document.getElementById('nuclear-widget')
  n &&
    createSymbolOverviewWidget(
      n,
      [
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:CMLS', 'Curium Medical']
      ],
      e
    )
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  ;((i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `))
  const n = i.querySelector(`.widget-container-${e.id.toLowerCase()}`)
  return (createSymbolOverviewWidget(n, e.symbols, t), i)
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = document.getElementById('market-widgets')
  t &&
    ((t.innerHTML = ''),
    [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ].forEach((i) => {
      const n = createMarketSection(i, e)
      t.appendChild(n)
    }))
  const i = document.getElementById('medtech-widget')
  i &&
    createSymbolOverviewWidget(
      i,
      [
        ['NYSE:MDT', 'Medtronic'],
        ['NYSE:JNJ', 'Johnson & Johnson'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:SYK', 'Stryker'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['NYSE:ABT', 'Abbott'],
        ['NYSE:BSX', 'Boston Scientific'],
        ['NYSE:BDX', 'Becton Dickinson'],
        ['NYSE:BAX', 'Baxter']
      ],
      e
    )
  const n = document.getElementById('nuclear-widget')
  n &&
    createSymbolOverviewWidget(
      n,
      [
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:CMLS', 'Curium Medical']
      ],
      e
    )
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  ;((i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `))
  const n = i.querySelector(`.widget-container-${e.id.toLowerCase()}`)
  return (createSymbolOverviewWidget(n, e.symbols, t), i)
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = document.getElementById('market-widgets')
  t &&
    ((t.innerHTML = ''),
    [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ].forEach((i) => {
      const n = createMarketSection(i, e)
      t.appendChild(n)
    }))
  const i = document.getElementById('medtech-widget')
  i &&
    createSymbolOverviewWidget(
      i,
      [
        ['NYSE:MDT', 'Medtronic'],
        ['NYSE:JNJ', 'Johnson & Johnson'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:SYK', 'Stryker'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['NYSE:ABT', 'Abbott'],
        ['NYSE:BSX', 'Boston Scientific'],
        ['NYSE:BDX', 'Becton Dickinson'],
        ['NYSE:BAX', 'Baxter']
      ],
      e
    )
  const n = document.getElementById('nuclear-widget')
  n &&
    createSymbolOverviewWidget(
      n,
      [
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:CMLS', 'Curium Medical']
      ],
      e
    )
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  ;((i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `))
  const n = i.querySelector(`.widget-container-${e.id.toLowerCase()}`)
  return (createSymbolOverviewWidget(n, e.symbols, t), i)
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = document.getElementById('market-widgets')
  t &&
    ((t.innerHTML = ''),
    [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ].forEach((i) => {
      const n = createMarketSection(i, e)
      t.appendChild(n)
    }))
  const i = document.getElementById('medtech-widget')
  i &&
    createSymbolOverviewWidget(
      i,
      [
        ['NYSE:MDT', 'Medtronic'],
        ['NYSE:JNJ', 'Johnson & Johnson'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:SYK', 'Stryker'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['NYSE:ABT', 'Abbott'],
        ['NYSE:BSX', 'Boston Scientific'],
        ['NYSE:BDX', 'Becton Dickinson'],
        ['NYSE:BAX', 'Baxter']
      ],
      e
    )
  const n = document.getElementById('nuclear-widget')
  n &&
    createSymbolOverviewWidget(
      n,
      [
        ['NASDAQ:GEHC', 'GE HealthCare'],
        ['XETR:SHL', 'Siemens Healthineers'],
        ['NYSE:PHG', 'Philips'],
        ['NASDAQ:CMLS', 'Curium Medical']
      ],
      e
    )
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  ;((i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `))
  const n = i.querySelector(`.widget-container-${e.id.toLowerCase()}`)
  return (createSymbolOverviewWidget(n, e.symbols, t), i)
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
class ThemeManager {
  constructor() {
    ;((this.storageKey = 'theme'),
      (this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')),
      (this.currentTheme = this.getInitialTheme()),
      this.init())
  }
  getInitialTheme() {
    return (
      localStorage.getItem(this.storageKey) ||
      (this.mediaQuery.matches ? 'dark' : 'light')
    )
  }
  setTheme(e) {
    ;(document.documentElement.setAttribute('data-theme', e),
      localStorage.setItem(this.storageKey, e),
      (this.currentTheme = e),
      window.dispatchEvent(
        new CustomEvent('themechange', { detail: { theme: e } })
      ))
  }
  updateButton(e, t) {
    const i = 'dark' === t
    ;((e.textContent = i ? 'Light' : 'Dark'),
      e.classList.toggle('btn-outline-light', i),
      e.classList.toggle('btn-outline-dark', !i),
      e.setAttribute('aria-label', `Switch to ${i ? 'light' : 'dark'} theme`))
  }
  toggleTheme() {
    const e = 'dark' === this.currentTheme ? 'light' : 'dark'
    return (this.setTheme(e), e)
  }
  init() {
    this.setTheme(this.currentTheme)
    const e = document.getElementById('theme-toggle')
    ;(e &&
      (this.updateButton(e, this.currentTheme),
      e.addEventListener('click', () => {
        const t = this.toggleTheme()
        this.updateButton(e, t)
      })),
      this.mediaQuery.addEventListener('change', (t) => {
        if (!localStorage.getItem(this.storageKey)) {
          const i = t.matches ? 'dark' : 'light'
          ;(this.setTheme(i), e && this.updateButton(e, i))
        }
      }))
  }
}
class ScrollManager {
  constructor() {
    ;((this.threshold = 300),
      (this.isVisible = !1),
      (this.button = document.getElementById('backToTopBtn')),
      (this.navHeight = 80),
      this.button && this.init(),
      this.initSmoothScrolling())
  }
  toggleVisibility() {
    const e = window.pageYOffset > this.threshold
    e !== this.isVisible &&
      ((this.isVisible = e),
      (this.button.style.display = e ? 'block' : 'none'),
      this.button.setAttribute('aria-hidden', !e))
  }
  scrollToTop() {
    ;(window.scrollTo({ top: 0, behavior: 'smooth' }),
      setTimeout(() => {
        document.querySelector('h1, [tabindex="0"]')?.focus()
      }, 100))
  }
  init() {
    ;(window.addEventListener(
      'scroll',
      () => {
        requestAnimationFrame(() => this.toggleVisibility())
      },
      { passive: !0 }
    ),
      this.button.addEventListener('click', (e) => {
        ;(e.preventDefault(), this.scrollToTop())
      }),
      this.toggleVisibility())
  }
  initSmoothScrolling() {
    ;(document.querySelectorAll('.internal-nav[data-scroll]').forEach((e) => {
      e.addEventListener('click', (t) => {
        t.preventDefault()
        const i = e.getAttribute('data-scroll')
        ;(this.scrollToSection(i), this.updateActiveNavLink(e))
        const n = document.querySelector('.navbar-collapse')
        n && n.classList.contains('show') && n.classList.remove('show')
      })
    }),
      this.setupNavigationHighlighting())
  }
  scrollToSection(e) {
    const t = document.getElementById(e)
    if (!t) return
    const i =
      t.getBoundingClientRect().top + window.pageYOffset - this.navHeight
    ;(window.scrollTo({ top: i, behavior: 'smooth' }),
      history.pushState(null, null, `#${e}`))
  }
  updateActiveNavLink(e) {
    ;(document.querySelectorAll('.internal-nav').forEach((e) => {
      ;(e.classList.remove('active'), e.removeAttribute('aria-current'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-current', 'page'))
  }
  setupNavigationHighlighting() {
    const e = document.querySelectorAll('section[id]'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting) {
              const t = document.querySelector(`[data-scroll="${e.target.id}"]`)
              t && this.updateActiveNavLink(t)
            }
          })
        },
        { threshold: 0.3, rootMargin: `-${this.navHeight}px 0px -50% 0px` }
      )
    e.forEach((e) => t.observe(e))
  }
}
class ProjectManager {
  constructor() {
    ;((this.projects = []),
      (this.currentFilter = 'all'),
      (this.currentSort = 'updated'),
      (this.categories = {
        cybersecurity: [
          'security',
          'cyber',
          'auth',
          'encryption',
          'vulnerability',
          'pentest'
        ],
        healthcare: [
          'medical',
          'health',
          'hospital',
          'patient',
          'dicom',
          'pacs'
        ],
        automation: [
          'script',
          'automation',
          'deploy',
          'ci',
          'cd',
          'pipeline',
          'workflow'
        ],
        tools: ['tool', 'utility', 'helper', 'cli', 'api', 'framework']
      }),
      this.init())
  }
  init() {
    ;(this.setupEventListeners(), this.interceptRepoWidget())
  }
  setupEventListeners() {
    document.querySelectorAll('.filter-btn').forEach((e) => {
      e.addEventListener('click', (e) => {
        ;(this.setFilter(e.target.getAttribute('data-filter')),
          this.updateFilterButtons(e.target))
      })
    })
    const e = document.getElementById('repo-sort')
    e &&
      e.addEventListener('change', (e) => {
        ;((this.currentSort = e.target.value), this.applyFiltersAndSort())
      })
  }
  setFilter(e) {
    ;((this.currentFilter = e), this.applyFiltersAndSort())
  }
  updateFilterButtons(e) {
    ;(document.querySelectorAll('.filter-btn').forEach((e) => {
      ;(e.classList.remove('active'), e.setAttribute('aria-pressed', 'false'))
    }),
      e.classList.add('active'),
      e.setAttribute('aria-pressed', 'true'))
  }
  categorizeProject(e) {
    const t = `${e.name} ${e.description || ''}`.toLowerCase()
    for (const [e, i] of Object.entries(this.categories))
      if (i.some((e) => t.includes(e))) return e
    return 'other'
  }
  filterProjects() {
    return 'all' === this.currentFilter
      ? this.projects
      : this.projects.filter(
          (e) => this.categorizeProject(e) === this.currentFilter
        )
  }
  sortProjects(e) {
    return [...e].sort((e, t) => {
      switch (this.currentSort) {
        case 'name':
          return e.name.localeCompare(t.name)
        case 'stars':
          return (t.stargazers_count || 0) - (e.stargazers_count || 0)
        case 'created':
          return new Date(t.created_at) - new Date(e.created_at)
        default:
          return new Date(t.updated_at) - new Date(e.updated_at)
      }
    })
  }
  applyFiltersAndSort() {
    const e = this.filterProjects(),
      t = this.sortProjects(e)
    this.renderProjects(t)
  }
  renderProjects(e) {
    const t = document.getElementById('repo-container'),
      i = document.getElementById('no-results')
    if (0 === e.length)
      ((t.style.display = 'none'), (i.style.display = 'block'))
    else {
      ;((t.style.display = 'block'),
        (i.style.display = 'none'),
        (t.innerHTML = '<div class="row" id="projects-row"></div>'))
      const n = t.querySelector('#projects-row')
      e.forEach((e) => {
        const t = this.createProjectCard(e)
        n.appendChild(t)
      })
    }
  }
  createProjectCard(e) {
    const t = document.createElement('div')
    t.className = 'col-md-6 col-lg-4 mb-4'
    const i = this.categorizeProject(e),
      n =
        'other' !== i ? `<span class="badge bg-secondary mb-2">${i}</span>` : ''
    return (
      (t.innerHTML = `\n      <div class="card h-100 project-card" data-category="${i}">\n        <div class="card-body d-flex flex-column">\n          ${n}\n          <h5 class="card-title">${e.name}</h5>\n          <p class="card-text flex-grow-1">${e.description || 'No description available'}</p>\n          <div class="d-flex justify-content-between align-items-center mt-auto">\n            <small class="text-muted">\n              ${e.language ? `<span class="me-3">üìù ${e.language}</span>` : ''}\n              ${e.stargazers_count ? `‚≠ê ${e.stargazers_count}` : ''}\n            </small>\n            <a href="${e.html_url}" target="_blank" rel="noopener" \n               class="btn btn-sm btn-outline-primary"\n               aria-label="View ${e.name} on GitHub">\n              View ‚Üí\n            </a>\n          </div>\n        </div>\n      </div>\n    `),
      t
    )
  }
  interceptRepoWidget() {
    if (void 0 === window.createRepoWidget) {
      const e = () => {
        'function' == typeof window.createRepoWidget
          ? this.setupWidgetOverride()
          : setTimeout(e, 100)
      }
      e()
    } else this.setupWidgetOverride()
  }
  setupWidgetOverride() {
    const e = window.createRepoWidget
    window.createRepoWidget = (t) => {
      try {
        const i = t.onLoad || (() => {})
        return (
          (t.onLoad = (e) => {
            ;((this.projects = e || []),
              this.hideLoading(),
              this.applyFiltersAndSort(),
              i(e))
          }),
          e(t)
        )
      } catch (e) {
        ;(console.warn('Error setting up repo widget:', e), this.hideLoading())
      }
    }
  }
  hideLoading() {
    const e = document.getElementById('repo-loading')
    e && (e.style.display = 'none')
  }
}
class AnimationManager {
  constructor() {
    ;((this.animatedElements = new Set()), this.init())
  }
  init() {
    ;(this.setupScrollAnimations(),
      this.animateProgressBars(),
      this.setupCardAnimations())
  }
  setupScrollAnimations() {
    const e = document.querySelectorAll('section'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              (e.target.classList.add('section-animate', 'visible'),
              'skills' === e.target.id && this.animateSkillsBars())
          })
        },
        { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
      )
    e.forEach((e) => {
      ;(e.classList.add('section-animate'), t.observe(e))
    })
  }
  animateSkillsBars() {
    document.querySelectorAll('#skills .progress-bar').forEach((e, t) => {
      const i = e.style.width
      ;((e.style.width = '0%'),
        setTimeout(() => {
          e.style.width = i
        }, 100 * t))
    })
  }
  animateProgressBars() {
    const e = document.querySelectorAll('.progress-bar'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            if (e.isIntersecting && !this.animatedElements.has(e.target)) {
              const t = `${e.target.getAttribute('aria-valuenow')}%`
              ;((e.target.style.width = '0%'),
                setTimeout(() => {
                  e.target.style.width = t
                }, 200),
                this.animatedElements.add(e.target))
            }
          })
        },
        { threshold: 0.5 }
      )
    e.forEach((e) => t.observe(e))
  }
  setupCardAnimations() {
    const e = document.querySelectorAll('.card'),
      t = new IntersectionObserver(
        (e) => {
          e.forEach((e) => {
            e.isIntersecting &&
              !this.animatedElements.has(e.target) &&
              (e.target.classList.add('fade-in'),
              this.animatedElements.add(e.target))
          })
        },
        { threshold: 0.1 }
      )
    e.forEach((e) => t.observe(e))
  }
  showLoading(e) {
    e &&
      (e.innerHTML =
        '\n        <div class="d-flex justify-content-center align-items-center py-4">\n          <div class="spinner-border text-primary me-3" role="status">\n            <span class="visually-hidden">Loading...</span>\n          </div>\n          <span class="text-muted">Loading content...</span>\n        </div>\n      ')
  }
  hideLoading(e) {
    if (e) {
      const t = e.querySelector('.spinner-border')
      t && t.closest('.d-flex').remove()
    }
  }
  revealContent(e, t) {
    ;((e.style.opacity = '0'),
      (e.innerHTML = t),
      setTimeout(() => {
        ;((e.style.transition = 'opacity 0.3s ease-in-out'),
          (e.style.opacity = '1'))
      }, 50))
  }
}
function initializeTradingWidgets() {
  const e =
    'dark' === (document.documentElement.getAttribute('data-theme') || 'light')
      ? 'dark'
      : 'light'
  ;(initializeHomeWidget(e),
    window.location.pathname.includes('market-analysis') &&
      initializeMarketAnalysisWidgets(e),
    observeThemeChanges())
}
function initializeHomeWidget(e) {
  const t = document.querySelector('.tradingview-widget-container')
  if (!t) return
  ;((t.innerHTML = ''),
    (t.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const i = document.createElement('script')
  ;((i.type = 'text/javascript'),
    (i.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'),
    (i.async = !0),
    (i.innerHTML = JSON.stringify({
      title: 'Stocks',
      tabs: [
        {
          title: 'Financial',
          symbols: [
            { s: 'NYSE:JPM', d: 'JPMorgan Chase' },
            { s: 'NYSE:WFC', d: 'Wells Fargo Co New' },
            { s: 'NYSE:BAC', d: 'Bank Amer Corp' },
            { s: 'NYSE:HSBC', d: 'Hsbc Hldgs Plc' },
            { s: 'NYSE:C', d: 'Citigroup Inc' },
            { s: 'NYSE:MA', d: 'Mastercard Incorporated' }
          ]
        },
        {
          title: 'Technology',
          symbols: [
            { s: 'NASDAQ:AAPL', d: 'Apple' },
            { s: 'NASDAQ:GOOGL', d: 'Alphabet' },
            { s: 'NASDAQ:MSFT', d: 'Microsoft' },
            { s: 'NASDAQ:META', d: 'Meta Platforms' },
            { s: 'NYSE:ORCL', d: 'Oracle Corp' },
            { s: 'NASDAQ:INTC', d: 'Intel Corp' }
          ]
        },
        {
          title: 'Services',
          symbols: [
            { s: 'NASDAQ:AMZN', d: 'Amazon' },
            { s: 'NYSE:BABA', d: 'Alibaba Group Hldg Ltd' },
            { s: 'NYSE:T', d: 'At&t Inc' },
            { s: 'NYSE:WMT', d: 'Walmart' },
            { s: 'NYSE:V', d: 'Visa' }
          ]
        }
      ],
      width: '100%',
      height: '100%',
      showChart: !0,
      showFloatingTooltip: !1,
      locale: 'en',
      plotLineColorGrowing: '#2962FF',
      plotLineColorFalling: '#2962FF',
      belowLineFillColorGrowing: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorFalling: 'rgba(41, 98, 255, 0.12)',
      belowLineFillColorGrowingBottom: 'rgba(41, 98, 255, 0)',
      belowLineFillColorFallingBottom: 'rgba(41, 98, 255, 0)',
      gridLineColor: 'rgba(240, 243, 250, 0)',
      scaleFontColor: 'rgba(120, 123, 134, 1)',
      showSymbolLogo: !0,
      symbolActiveColor: 'rgba(41, 98, 255, 0.12)',
      colorTheme: e
    })),
    t.appendChild(i))
}
function initializeMarketAnalysisWidgets(e) {
  const t = [
      {
        id: 'Americas',
        title: 'Americas',
        desc: 'Main Americas indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:DJI', 'Dow Jones'],
          ['FOREXCOM:SPXUSD', 'S&P 500'],
          ['FOREXCOM:NSXUSD', 'NASDAQ'],
          ['TSX:TSX', 'TSX Composite'],
          ['BMFBOVESPA:IBOV', 'Bovespa']
        ]
      },
      {
        id: 'Europe',
        title: 'Europe',
        desc: 'Main European indices and their 5Y performance',
        symbols: [
          ['FOREXCOM:UKXGBP', 'FTSE 100'],
          ['FOREXCOM:FRXEUR', 'CAC 40'],
          ['XETR:DAX', 'DAX'],
          ['FOREXCOM:SPXEUR', 'Euro Stoxx 50'],
          ['FOREXCOM:ESXEUR', 'Euro Stoxx 600']
        ]
      },
      {
        id: 'APAC',
        title: 'Asia-Pacific',
        desc: 'Main Asia-Pacific indices and their 5Y performance',
        symbols: [
          ['TVC:NI225', 'Nikkei 225'],
          ['HKEX:HSI', 'Hang Seng'],
          ['SSE:000001', 'Shanghai Composite'],
          ['ASX:XJO', 'ASX 200'],
          ['KRX:KOSPI', 'KOSPI']
        ]
      }
    ],
    i = document.getElementById('market-widgets')
  i &&
    ((i.innerHTML = ''),
    t.forEach((t) => {
      const n = createMarketSection(t, e)
      i.appendChild(n)
    }))
  const n = [
      ['NYSE:MDT', 'Medtronic'],
      ['NYSE:JNJ', 'Johnson & Johnson'],
      ['XETR:SHL', 'Siemens Healthineers'],
      ['NYSE:SYK', 'Stryker'],
      ['NYSE:PHG', 'Philips'],
      ['NASDAQ:GEHC', 'GE HealthCare'],
      ['NYSE:ABT', 'Abbott'],
      ['NYSE:BSX', 'Boston Scientific'],
      ['NYSE:BDX', 'Becton Dickinson'],
      ['NYSE:BAX', 'Baxter']
    ],
    s = document.getElementById('medtech-widget')
  s && createSymbolOverviewWidget(s, n, e)
  const r = [
      ['NASDAQ:GEHC', 'GE HealthCare'],
      ['XETR:SHL', 'Siemens Healthineers'],
      ['NYSE:PHG', 'Philips'],
      ['NASDAQ:CMLS', 'Curium Medical']
    ],
    a = document.getElementById('nuclear-widget')
  a && createSymbolOverviewWidget(a, r, e)
}
function createMarketSection(e, t) {
  const i = document.createElement('section')
  ;((i.className = 'mb-5'),
    (i.innerHTML = `\n    <h2 class="mb-3">${e.title}</h2>\n    <p class="mb-4 text-muted">${e.desc}</p>\n    <div class="widget-container-${e.id.toLowerCase()}"></div>\n  `))
  const n = i.querySelector(`.widget-container-${e.id.toLowerCase()}`)
  return (createSymbolOverviewWidget(n, e.symbols, t), i)
}
function createSymbolOverviewWidget(e, t, i) {
  if (!e) return
  e.innerHTML = ''
  const n = document.createElement('div')
  ;((n.className = 'tradingview-widget-container mb-4'),
    (n.style.height = '500px'),
    (n.innerHTML =
      '\n    <div class="tradingview-widget-container__widget"></div>\n    <div class="tradingview-widget-copyright">\n      <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">\n        <span class="blue-text">Track all markets on TradingView</span>\n      </a>\n    </div>\n  '))
  const s = document.createElement('script')
  ;((s.type = 'text/javascript'),
    (s.src =
      'https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js'),
    (s.async = !0),
    (s.innerHTML = JSON.stringify({
      symbols: t,
      chartOnly: !1,
      width: '100%',
      height: '500',
      locale: 'en',
      colorTheme: i,
      autosize: !0,
      showVolume: !0,
      showMA: !1,
      hideDateRanges: !1,
      hideMarketStatus: !1,
      hideSymbolLogo: !1,
      scalePosition: 'right',
      scaleMode: 'Normal',
      fontFamily:
        '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
      fontSize: '10',
      noTimeScale: !1,
      valuesTracking: '1',
      changeMode: 'price-and-percent',
      chartType: 'area',
      maLineColor: '#2563eb',
      maLineWidth: 1,
      maLength: 9,
      headerFontSize: 'medium',
      lineWidth: 2,
      lineType: 0,
      dateRanges: ['1d|1', '1m|30', '3m|60', '12m|1D', '60m|1W', 'all|1M']
    })),
    n.appendChild(s),
    e.appendChild(n))
}
function observeThemeChanges() {
  new MutationObserver((e) => {
    e.forEach((e) => {
      'attributes' === e.type &&
        'data-theme' === e.attributeName &&
        setTimeout(() => {
          window.location.reload()
        }, 100)
    })
  }).observe(document.documentElement, {
    attributes: !0,
    attributeFilter: ['data-theme']
  })
}
function refreshAllWidgets() {
  window.location.reload()
}
;(document.addEventListener('DOMContentLoaded', () => {
  const e = new ThemeManager(),
    t = new ScrollManager(),
    i = new ProjectManager(),
    n = new AnimationManager()
  window.portfolioUtils = {
    themeManager: e,
    scrollManager: t,
    projectManager: i,
    animationManager: n
  }
}),
  document.addEventListener('DOMContentLoaded', () => {
    initializeTradingWidgets()
  }),
  (window.refreshAllWidgets = refreshAllWidgets))
