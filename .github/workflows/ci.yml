name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  deployments: write
  issues: write

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Lint JavaScript
        run: npm run lint:js
      
      - name: Lint HTML
        run: npm run lint:html
      
      - name: Lint CSS
        run: npm run lint:css
        continue-on-error: true  # Allow style violations while logging them
      
      - name: Validate HTML
        run: npm run validate:html
        continue-on-error: true  # Allow semantic HTML issues while logging them

      - name: Security audit (development dependencies)
        run: npm audit --omit=dev || true  # Only check production dependencies for security

      - name: Security audit (all dependencies with custom script)
        run: npm run security:audit
        continue-on-error: true  # Log vulnerabilities but don't fail on dev dependencies
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
          head: HEAD
          extra_args: --debug --only-verified

  # Testing Suite
  test:
    name: Automated Tests
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start development server
        run: |
          echo "Starting development server..."
          npm run dev &
          DEV_PID=$!
          echo "Development server PID: $DEV_PID"

          # Wait for server to be ready with better error handling
          if npx wait-on http://localhost:3000 --timeout 60000 --interval 1000; then
            echo "✅ Development server is ready"
          else
            echo "❌ Development server failed to start"
            kill $DEV_PID 2>/dev/null || true
            exit 1
          fi

      - name: Run E2E tests
        run: npx playwright test --config=tests/e2e/playwright.config.js --project=${{ matrix.browser }}
        env:
          CI: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # Performance & Accessibility Testing
  lighthouse:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Start development server
        run: |
          echo "Starting development server for Lighthouse..."
          npm run dev &
          DEV_PID=$!
          echo "Development server PID: $DEV_PID"

          # Wait for server to be ready with better error handling
          if npx wait-on http://localhost:3000 --timeout 60000 --interval 1000; then
            echo "✅ Development server is ready"
          else
            echo "❌ Development server failed to start"
            kill $DEV_PID 2>/dev/null || true
            exit 1
          fi

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        if: env.LHCI_GITHUB_APP_TOKEN != ''
      
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # Build Optimization
  build:
    name: Build & Optimize
    runs-on: ubuntu-latest
    needs: [quality, test, lighthouse]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Optimize images
        run: npm run optimize:images
      
      - name: Minify CSS
        run: npm run minify:css
      
      - name: Minify JavaScript
        run: npm run minify:js
      
      - name: Upload optimized assets
        uses: actions/upload-artifact@v4
        with:
          name: optimized-assets
          path: |
            site/static/css/*.min.css
            site/static/js/*.min.js
            site/static/images/optimized/
          retention-days: 30

  # Azure Static Web Apps Deployment
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, test, lighthouse]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Deploy to Azure Static Web Apps (Staging)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "site"
          output_location: ""
          production_branch: "master"

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, test, lighthouse, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Deploy to Azure Static Web Apps (Production)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "site"
          output_location: ""

  # Cleanup staging environment on PR close
  cleanup_staging:
    name: Cleanup Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Close staging environment
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          app_location: "site"

  # Security Monitoring
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      actions: read
      contents: read
      security-events: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
      
      - name: Prepare ZAP workspace
        run: |
          mkdir -p ${{ github.workspace }}/zap-results
          chmod 777 ${{ github.workspace }}/zap-results
          # Create empty yaml file to prevent permission error
          touch ${{ github.workspace }}/zap.yaml
          chmod 666 ${{ github.workspace }}/zap.yaml

      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run -v ${{ github.workspace }}:/zap/wrk/:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t https://dashti.se \
            -c /zap/wrk/.zap/rules.tsv \
            -J zap-results/report.json \
            -w zap-results/report.md \
            -r zap-results/report.html \
            -a || echo "ZAP scan completed with findings"
        continue-on-error: true

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-baseline-report
          path: zap-results/
          retention-days: 30

  # Notification
  notify:
    name: Notify on Deployment
    runs-on: ubuntu-latest
    needs: [deploy_production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Portfolio deployment to production: ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''